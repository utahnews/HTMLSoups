name: Update Documentation

on:
  push:
    branches:
      - main
    paths:
      - "Sources/**/*.swift"
      - "Tests/**/*.swift"
      - "Package.swift"
      - "README.md"
      - ".github/workflows/update-docs.yml"

jobs:
  update-docs:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Swift
        run: |
          wget -q https://swift.org/builds/swift-5.9-release/ubuntu2204/swift-5.9-RELEASE/swift-5.9-RELEASE-ubuntu22.04.tar.gz
          tar xzf swift-5.9-RELEASE-ubuntu22.04.tar.gz
          echo "$(pwd)/swift-5.9-RELEASE-ubuntu22.04/usr/bin" >> $GITHUB_PATH

      - name: Verify Swift Installation
        run: |
          swift --version
          which swift

      - name: Install Dependencies
        run: |
          swift package resolve
          swift build

      - name: Debug Git Status
        run: |
          git status
          git log -1 --name-status

      - name: Update Documentation
        run: |
          # Create a temporary Swift script to analyze changes
          cat > update_docs.swift << 'EOL'
          import Foundation

          // Get the list of changed files from git
          let gitDiff = Process()
          gitDiff.executableURL = URL(fileURLWithPath: "/usr/bin/git")
          gitDiff.arguments = ["diff", "--name-only", "HEAD~1", "HEAD"]

          let outputPipe = Pipe()
          gitDiff.standardOutput = outputPipe

          try gitDiff.run()
          gitDiff.waitUntilExit()

          let outputData = try outputPipe.fileHandleForReading.readToEnd() ?? Data()
          let changedFiles = String(data: outputData, encoding: .utf8)?.components(separatedBy: .newlines) ?? []

          print("Changed files: \(changedFiles)")

          // Filter for Swift files
          let swiftFiles = changedFiles.filter { $0.hasSuffix(".swift") }
          print("Swift files: \(swiftFiles)")

          // Update ProjectOverview.swift if needed
          if swiftFiles.contains(where: { $0.contains("Sources/HTMLSoups") }) {
              print("Updating ProjectOverview.swift")
              let projectOverviewPath = "Sources/HTMLSoups/Documentation/ProjectOverview.swift"
              if FileManager.default.fileExists(atPath: projectOverviewPath) {
                  var projectOverview = try String(contentsOfFile: projectOverviewPath, encoding: .utf8)
                  
                  // Update last modified date
                  let dateFormatter = DateFormatter()
                  dateFormatter.dateFormat = "yyyy-MM-dd"
                  let currentDate = dateFormatter.string(from: Date())
                  
                  if let dateRange = projectOverview.range(of: "Last Modified: .*") {
                      projectOverview.replaceSubrange(dateRange, with: "Last Modified: \(currentDate)")
                      try projectOverview.write(toFile: projectOverviewPath, atomically: true, encoding: .utf8)
                      print("Updated ProjectOverview.swift")
                  } else {
                      print("No date line found in ProjectOverview.swift")
                  }
              } else {
                  print("ProjectOverview.swift not found at path: \(projectOverviewPath)")
              }
          }

          // Update README.md if needed
          if changedFiles.contains("README.md") {
              print("Updating README.md")
              let readmePath = "README.md"
              if FileManager.default.fileExists(atPath: readmePath) {
                  var readme = try String(contentsOfFile: readmePath, encoding: .utf8)
                  
                  // Update last modified date
                  let dateFormatter = DateFormatter()
                  dateFormatter.dateFormat = "yyyy-MM-dd"
                  let currentDate = dateFormatter.string(from: Date())
                  
                  if let dateRange = readme.range(of: "Last Updated: .*") {
                      readme.replaceSubrange(dateRange, with: "Last Updated: \(currentDate)")
                      try readme.write(toFile: readmePath, atomically: true, encoding: .utf8)
                      print("Updated README.md")
                  } else {
                      print("No date line found in README.md")
                  }
              } else {
                  print("README.md not found at path: \(readmePath)")
              }
          }
          EOL

          # Run the Swift script
          swift update_docs.swift

      - name: Commit Documentation Updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Sources/HTMLSoups/Documentation/ProjectOverview.swift README.md
          git status
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "docs: Update documentation for latest changes"
            git push
          fi
